package ru.itmo.telecom.notification.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import ru.itmo.telecom.shared.order.dto.ApplicationCreateRequest;
import ru.itmo.telecom.shared.order.dto.ApplicationDetailRequest;
import ru.itmo.telecom.shared.order.dto.ApplicationDto;
import ru.itmo.telecom.shared.tariff.dto.ServiceParameterDto;
import ru.itmo.telecom.shared.tariff.dto.TariffDto;
import ru.itmo.telecom.shared.user.dto.ClientDto;
import ru.itmo.telecom.shared.user.dto.ClientRegistrationDto;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
public class BotService {

    private final RestTemplate restTemplate;
    private final Map<Long, UserSession> userSessions = new HashMap<>();

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è URL —Å–µ—Ä–≤–∏—Å–æ–≤
    private final String USER_SERVICE_URL = "http://localhost:8080/api/v1/users";
    private final String TARIFF_SERVICE_URL = "http://localhost:8081/api/v1/tariffs";
    private final String ORDER_SERVICE_URL = "http://localhost:8082/api/v1/orders";

    public BotService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public String handleMessage(Long chatId, String message, String userFirstName) {
        UserSession session = userSessions.getOrDefault(chatId, new UserSession());

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (message.startsWith("/")) {
            return handleCommand(chatId, message, userFirstName, session);
        } else {
            return handleDialog(chatId, message, session);
        }
    }

    private String handleCommand(Long chatId, String command, String userFirstName, UserSession session) {
        userSessions.put(chatId, new UserSession()); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã

        switch (command) {
            case "/start":
                return handleStartCommand(chatId, userFirstName);
            case "/tariffs":
                return getAvailableTariffs();
            case "/constructor":
                userSessions.put(chatId, new UserSession("CONSTRUCTOR", 0));
                return "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ! üöÄ\n\n–°–∫–æ–ª—å–∫–æ –ì–ë –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ? (1-100)";
            case "/profile":
                return getUserProfile(chatId);
            case "/my_orders":
                return getUserOrders(chatId);
            case "/help":
                return getHelpMessage();
            case "/cancel":
                return "–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.";
            default:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
        }
    }

    private String handleStartCommand(Long chatId, String userFirstName) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            String url = USER_SERVICE_URL + "/telegram/" + chatId;
            ResponseEntity<ClientDto> response = restTemplate.getForEntity(url, ClientDto.class);

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                return String.format("–ü—Ä–∏–≤–µ—Ç, %s! üëã –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/tariffs - –ì–æ—Ç–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã\n/constructor - –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ\n/cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
                        userFirstName);
            }
        } catch (Exception e) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            UserSession session = new UserSession("REGISTRATION", 0);
            userSessions.put(chatId, session);
            return String.format("–ü—Ä–∏–≤–µ—Ç, %s! üëã –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è!\n\n–í–∞—à–µ –∏–º—è:", userFirstName);
        }

        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    private String handleDialog(Long chatId, String message, UserSession session) {
        if (session.getState() == null) {
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.";
        }

        switch (session.getState()) {
            case "REGISTRATION":
                return handleRegistration(chatId, message, session);
            case "CONSTRUCTOR":
                return handleConstructor(chatId, message, session);
            default:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.";
        }
    }

    private String handleRegistration(Long chatId, String message, UserSession session) {
        switch (session.getStep()) {
            case 0: // –ò–º—è
                session.setFirstName(message);
                session.setStep(1);
                return "–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è:";
            case 1: // –§–∞–º–∏–ª–∏—è
                session.setLastName(message);
                session.setStep(2);
                return "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 79161234567):";
            case 2: // –¢–µ–ª–µ—Ñ–æ–Ω
                if (!isValidPhone(message)) {
                    return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79161234567:";
                }
                session.setPhoneNumber(message);

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return completeRegistration(chatId, session);
            default:
                return "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.";
        }
    }

    private String completeRegistration(Long chatId, UserSession session) {
        try {
            ClientRegistrationDto registrationDto = new ClientRegistrationDto();
            registrationDto.setTelegramId(chatId);
            registrationDto.setFirstName(session.getFirstName());
            registrationDto.setLastName(session.getLastName());
            registrationDto.setPhoneNumber(session.getPhoneNumber());

            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log.debug("Attempting to register user: {}", registrationDto);

            String url = USER_SERVICE_URL + "/register";
            log.debug("Calling user service: {}", url);

            ResponseEntity<ClientDto> response = restTemplate.postForEntity(url, registrationDto, ClientDto.class);

            log.debug("Registration response: Status {}, Body {}", response.getStatusCode(), response.getBody());

            if (response.getStatusCode().is2xxSuccessful()) {
                userSessions.remove(chatId); // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                return "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\\n\\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\\n/tariffs - –ì–æ—Ç–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã\\n/constructor - –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ\\n/cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è";
            } else {
                log.warn("Registration failed with status: {}", response.getStatusCode());
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: " + response.getStatusCode();
            }
        } catch (Exception e) {
            log.error("Registration error for chatId: {}", chatId, e);
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: " + e.getMessage();
        }
    }

    private String handleConstructor(Long chatId, String message, UserSession session) {
        try {
            int value = Integer.parseInt(message);

            switch (session.getStep()) {
                case 0: // –ò–Ω—Ç–µ—Ä–Ω–µ—Ç
                    if (value < 1 || value > 100) {
                        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –¥–ª—è –ì–ë –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:";
                    }
                    session.setInternetGb(value);
                    session.setStep(1);
                    return "–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤? (0-1000)";
                case 1: // –ú–∏–Ω—É—Ç—ã
                    if (value < 0 || value > 1000) {
                        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1000 –¥–ª—è –º–∏–Ω—É—Ç:";
                    }
                    session.setMinutes(value);
                    session.setStep(2);
                    return "–°–∫–æ–ª—å–∫–æ SMS —Å–æ–æ–±—â–µ–Ω–∏–π? (0-500)";
                case 2: // SMS
                    if (value < 0 || value > 500) {
                        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 500 –¥–ª—è SMS:";
                    }
                    session.setSms(value);

                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
                    return completeCustomTariff(chatId, session);
                default:
                    return "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.";
            }
        } catch (NumberFormatException e) {
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:";
        }
    }

    private String completeCustomTariff(Long chatId, UserSession session) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º ID –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—Å–ª—É–≥
            Integer internetParamId = 1; // ID –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
            Integer minutesParamId = 2;  // ID –¥–ª—è –º–∏–Ω—É—Ç
            Integer smsParamId = 3;      // ID –¥–ª—è SMS

            List<ApplicationDetailRequest> details = new ArrayList<>();

            if (session.getInternetGb() > 0) {
                details.add(new ApplicationDetailRequest(internetParamId, session.getInternetGb()));
            }
            if (session.getMinutes() > 0) {
                details.add(new ApplicationDetailRequest(minutesParamId, session.getMinutes()));
            }
            if (session.getSms() > 0) {
                details.add(new ApplicationDetailRequest(smsParamId, session.getSms()));
            }

            // –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
            Integer clientId = getClientIdByTelegramId(chatId);
            if (clientId == null) {
                return "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start";
            }

            ApplicationCreateRequest createRequest = new ApplicationCreateRequest();
            createRequest.setClientId(clientId);
            createRequest.setDetails(details);

            String url = ORDER_SERVICE_URL + "/applications";
            ResponseEntity<ApplicationDto> response = restTemplate.postForEntity(url, createRequest, ApplicationDto.class);

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                ApplicationDto application = response.getBody();
                userSessions.remove(chatId);

                return String.format("‚úÖ –í–∞—à —Ç–∞—Ä–∏—Ñ: %d–ì–ë + %d –º–∏–Ω—É—Ç + %d SMS\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: %.2f —Ä—É–±/–º–µ—Å\n\nüìã –ó–∞—è–≤–∫–∞ ‚Ññ%d —Å–æ–∑–¥–∞–Ω–∞!\n\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
                        session.getInternetGb(), session.getMinutes(), session.getSms(),
                        application.getTotalCost(), application.getId());
            }
        } catch (Exception e) {
            log.error("Error creating custom tariff", e);
        }

        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    private String getAvailableTariffs() {
        try {
            String url = TARIFF_SERVICE_URL;
            ResponseEntity<TariffDto[]> response = restTemplate.getForEntity(url, TariffDto[].class);

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                StringBuilder sb = new StringBuilder("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n");

                for (TariffDto tariff : response.getBody()) {
                    sb.append(String.format("üè∑Ô∏è %s\n%s\n\n",
                            tariff.getName(),
                            tariff.getDescription() != null ? tariff.getDescription() : ""));
                }

                sb.append("–î–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /constructor");
                return sb.toString();
            }
        } catch (Exception e) {
            log.error("Error getting tariffs", e);
        }

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    private String getUserProfile(Long chatId) {
        try {
            String url = USER_SERVICE_URL + "/telegram/" + chatId;
            ResponseEntity<ClientDto> response = restTemplate.getForEntity(url, ClientDto.class);

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                ClientDto client = response.getBody();
                return String.format("üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–º—è: %s\n–§–∞–º–∏–ª–∏—è: %s\n–¢–µ–ª–µ—Ñ–æ–Ω: %s\n–°—Ç–∞—Ç—É—Å: %s",
                        client.getFirstName(), client.getLastName(),
                        client.getPhoneNumber(), client.getStatus());
            }
        } catch (Exception e) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        }

        return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.";
    }

    private String getUserOrders(Long chatId) {
        try {
            Integer clientId = getClientIdByTelegramId(chatId);
            if (clientId == null) {
                return "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start";
            }

            String url = ORDER_SERVICE_URL + "/applications/client/" + clientId;
            ResponseEntity<ApplicationDto[]> response = restTemplate.getForEntity(url, ApplicationDto[].class);

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                ApplicationDto[] applications = response.getBody();

                if (applications.length == 0) {
                    return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.";
                }

                StringBuilder sb = new StringBuilder("üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n");
                for (ApplicationDto app : applications) {
                    sb.append(String.format("–ó–∞—è–≤–∫–∞ ‚Ññ%d\n–°—Ç–∞—Ç—É—Å: %s\n–°—Ç–æ–∏–º–æ—Å—Ç—å: %.2f —Ä—É–±\n\n",
                            app.getId(), app.getStatus().getName(), app.getTotalCost()));
                }

                return sb.toString();
            }
        } catch (Exception e) {
            log.error("Error getting user orders", e);
        }

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    private String getHelpMessage() {
        return """
                ü§ñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
                
                /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                /tariffs - –ü—Ä–æ—Å–º–æ—Ç—Ä –≥–æ—Ç–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
                /constructor - –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ
                /profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
                /my_orders - –ú–æ–∏ –∑–∞—è–≤–∫–∏
                /cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
                
                –î–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel
                """;
    }

    private Integer getClientIdByTelegramId(Long telegramId) {
        try {
            String url = USER_SERVICE_URL + "/telegram/" + telegramId;
            ResponseEntity<ClientDto> response = restTemplate.getForEntity(url, ClientDto.class);

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                return response.getBody().getId();
            }
        } catch (Exception e) {
            log.error("Error getting client ID", e);
        }
        return null;
    }

    private boolean isValidPhone(String phone) {
        return phone.matches("^(7|8)\\d{10}$");
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private static class UserSession {
        private String state;
        private int step;
        private String firstName;
        private String lastName;
        private String phoneNumber;
        private Integer internetGb;
        private Integer minutes;
        private Integer sms;

        public UserSession() {}

        public UserSession(String state, int step) {
            this.state = state;
            this.step = step;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
        public String getState() { return state; }
        public void setState(String state) { this.state = state; }
        public int getStep() { return step; }
        public void setStep(int step) { this.step = step; }
        public String getFirstName() { return firstName; }
        public void setFirstName(String firstName) { this.firstName = firstName; }
        public String getLastName() { return lastName; }
        public void setLastName(String lastName) { this.lastName = lastName; }
        public String getPhoneNumber() { return phoneNumber; }
        public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }
        public Integer getInternetGb() { return internetGb; }
        public void setInternetGb(Integer internetGb) { this.internetGb = internetGb; }
        public Integer getMinutes() { return minutes; }
        public void setMinutes(Integer minutes) { this.minutes = minutes; }
        public Integer getSms() { return sms; }
        public void setSms(Integer sms) { this.sms = sms; }
    }
}